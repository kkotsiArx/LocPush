// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LocPush
import CoreData
import Foundation
@_exported import LocPush
import Swift
@_hasMissingDesignatedInitializers @objc(DeviceInfoParams) public class DeviceInfoParams : ObjectiveC.NSObject {
  @objc public var language: Swift.String {
    @objc get
  }
  @objc public var isIdle: Swift.Bool {
    @objc get
  }
  @_inheritsConvenienceInitializers @objc(Builder) public class Builder : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc(language:) public func language(language: Swift.String) -> LocPush.DeviceInfoParams.Builder
    @objc(isIdle:) public func isIdle(isIdle: Swift.Bool) -> LocPush.DeviceInfoParams.Builder
    @objc(build) public func build() -> LocPush.DeviceInfoParams
    @objc deinit
  }
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class Event : Swift.Codable {
  public init(dictionary: [Swift.String : Any], deviceUuid: Swift.String) throws
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public var idle: Swift.Bool? {
    get
    set
  }
  public var eventId: Swift.String {
    get
    set
  }
  public var eventTypeBehaviour: Swift.Int {
    get
    set
  }
  public var spentTime: Swift.Int64? {
    get
    set
  }
  public var screenName: Swift.String? {
    get
    set
  }
  public var sessionId: Swift.String? {
    get
    set
  }
  public var campaignId: Swift.Int? {
    get
    set
  }
  public var messageSource: Swift.Int? {
    get
    set
  }
  public var applicationId: Swift.Int {
    get
    set
  }
  public var os: Swift.Int? {
    get
    set
  }
  public var uuid: Swift.String {
    get
    set
  }
  public var time: Swift.Int64 {
    get
    set
  }
  public var key: Swift.String? {
    get
    set
  }
  public var value: Swift.String? {
    get
    set
  }
  public var deviceId: Swift.String? {
    get
    set
  }
  @objc deinit
}
public class JsMessage : Swift.Codable {
  public enum TypeOfMessage : Swift.String {
    case addTag
    case addAction
    case deeplink
    case url
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public var type: Swift.String {
    get
  }
  public var value: Swift.String {
    get
  }
  @objc deinit
}
@objc(InboxMessageResponse) public class InboxMessageResponse : ObjectiveC.NSObject, Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc public var campaignId: Swift.Int {
    @objc get
  }
  @objc public var messageId: Swift.Int {
    @objc get
  }
  @objc public var dateCreated: Swift.Int64 {
    @objc get
  }
  @objc public var title: Swift.String {
    @objc get
  }
  @objc public var messageDescription: Swift.String {
    @objc get
  }
  @objc public var richImageUrl: Swift.String? {
    @objc get
  }
  @objc(setRead:) public func setRead(read: Swift.Bool)
  @objc public func isRead() -> Swift.Bool
  @objc public var iconUrl: Swift.String? {
    @objc get
  }
  @objc public var data: [Swift.String : Swift.String] {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum IActionConstants : Swift.Int {
  case openApp = 1
  case popUpLandingPage = 2
  case fullLandingPage = 3
  case externalWebView = 5
  case deepLink = 6
  case unknown = -1
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(Credentials) public class Credentials : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public var uuid: Swift.String {
    get
    set
  }
  @objc(getAssociations) public func getAssociations() -> [Swift.String : Any]
  @objc(addAssociationWith::) public func addAssociationWith(key: Swift.String, value: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RegisterDevice : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public var uuid: Swift.String? {
    get
    set
  }
  public var token: Swift.String {
    get
    set
  }
  public var osVersion: Swift.Int? {
    get
    set
  }
  public var operatorName: Swift.String {
    get
    set
  }
  public var operatorCode: Swift.String {
    get
    set
  }
  public var language: Swift.String {
    get
    set
  }
  public var timezone: Swift.Int? {
    get
    set
  }
  public var applicationVersion: Swift.String {
    get
    set
  }
  public var libraryVersion: Swift.String {
    get
    set
  }
  public var appId: Swift.Int {
    get
    set
  }
  public var appSecret: Swift.String {
    get
    set
  }
  public var os: Swift.Int {
    get
    set
  }
  public var deviceId: Swift.String {
    get
    set
  }
  public var networkType: Swift.String {
    get
    set
  }
  public var isIdle: Swift.Bool {
    get
    set
  }
  public var deviceType: Swift.Int {
    get
    set
  }
  public var model: Swift.String {
    get
    set
  }
  public var manufacturer: Swift.String {
    get
    set
  }
  public var isDeviceOnline: Swift.Bool {
    get
    set
  }
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
}
@_hasMissingDesignatedInitializers public class DeleteInboxMessage : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public var associatedValue: Swift.String {
    get
    set
  }
  public var campaignId: Swift.Int {
    get
    set
  }
  public var uuid: Swift.String {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MarkInboxMessageAsUnread : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public var campaignId: Swift.Int {
    get
    set
  }
  public var messageId: Swift.Int? {
    get
    set
  }
  public var uuid: Swift.String {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GetInbox : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public var uuid: Swift.String {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(MainLocPush) public class MainLocPush : ObjectiveC.NSObject {
  @objc public static var shared: LocPush.MainLocPush {
    @objc get
  }
  @objc(withOptions::) public static func withOptions(fileName: Swift.String = "locpush_properties", ofType: Swift.String = "plist") -> LocPush.MainLocPush
  @objc(with) public static func with() -> LocPush.MainLocPush
  final public let LocpushKitBundle: Foundation.Bundle
  @objc(getIdle) public func getIdle() -> Swift.Bool
  @objc(getLanguage) public func getLanguage() -> Swift.String
  @objc(configure) public func configure()
  @discardableResult
  @objc(subscribeUuid:) public func subscribeUuid(onUuidChangeListener: @escaping (Swift.String) -> Swift.Void) -> LocPush.MainLocPush
  @discardableResult
  @objc(unsubscribeUuid) public func unsubscribeUuid() -> LocPush.MainLocPush
  @discardableResult
  @objc(updateLocpushToken:) public func updateLocpushToken(fcmToken: Swift.String) -> LocPush.MainLocPush
  @discardableResult
  @objc(delegateActionOpening:) public func delegateActionOpening(shouldDelegate: Swift.Bool) -> LocPush.MainLocPush
  @discardableResult
  @objc(triggerDelegatedAction) public func triggerDelegatedAction() -> LocPush.MainLocPush
  @discardableResult
  @objc(blockTrackingAnalytics:) public func blockTrackingAnalytics(block: Swift.Bool) -> LocPush.MainLocPush
  @objc(getNoticiationAction:) public func getNoticiationAction(response: UserNotifications.UNNotificationResponse) -> LocPush.IActionConstants
  @objc(mInboxCenter) public var mInboxCenter: LocPush.InboxCenter {
    @objc get
  }
  @discardableResult
  @objc(interceptNotifications:) public func interceptNotifications(intercept: Swift.Bool) -> LocPush.MainLocPush
  @objc(versionLibrary) public func versionLibrary() -> Swift.String
  @discardableResult
  @objc(handleNotificationTap::) public func handleNotificationTap(didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void) -> LocPush.MainLocPush
  @discardableResult
  @objc(handleNotificationReceived::) public func handleNotificationReceived(willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void) -> LocPush.MainLocPush
  @discardableResult
  @objc(handleBackgroundNotification::) public func handleBackgroundNotification(didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void) -> LocPush.MainLocPush
  @discardableResult
  @objc(locTrackScreen:) public func locTrackScreen(named: Swift.String) -> LocPush.MainLocPush
  @discardableResult
  @objc(associateUuidWithCredentials::) public func associateUuidWithCredentials(credentials: LocPush.Credentials, callback: @escaping (Swift.Bool) -> Swift.Void) -> LocPush.MainLocPush
  @discardableResult
  @objc(addTag::) public func addTag(key: Swift.String, value: Swift.String) -> LocPush.MainLocPush
  @discardableResult
  @objc(addAction::) public func addAction(key: Swift.String, value: Swift.String) -> LocPush.MainLocPush
  @discardableResult
  @objc(updateDeviceInfo::) public func updateDeviceInfo(params: LocPush.DeviceInfoParams, callback: @escaping (Swift.Bool, LocPush.DeviceInfoParams?) -> Swift.Void) -> LocPush.MainLocPush
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LocPushTools {
  public static let shared: LocPush.LocPushTools
  public static var IOS_OPERATING_SYSTEM: Swift.Int
  public func generatePushID(ascending: Swift.Bool = true) -> Swift.String
  public func getTimestampFromPushID(IDtoDecode: Swift.String) -> Swift.Int
  public static func getNetworkType() -> Swift.String
  public func getNetworkStatus() -> Swift.String
  public static func timeStamp() -> Swift.Int64
  public static func canMakePhoneCall() -> Swift.Bool
  @objc deinit
}
extension NSNotification.Name {
  public static let locPushRichPopUpDismissed: Foundation.NSNotification.Name
}
@objc public class GetInboxCountResponse : ObjectiveC.NSObject, Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc public var total: Swift.Int {
    @objc get
  }
  @objc public var read: Swift.Int {
    @objc get
  }
  @objc public var unRead: Swift.Int {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
public class RegisterResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public var uuid: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GetInboxCount : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(InboxCenter) public class InboxCenter : ObjectiveC.NSObject {
  @objc public enum Filter : Swift.Int {
    case DEFAULT = 0
    case ONLY_READ = 1
    case ONLY_UNREAD = 2
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public static let MAX_LIMIT: Swift.Int
  @objc(setOnNewInboxMessageGetListener:) public func setOnNewInboxMessageGetListener(onNewInboxMessageGetListener: @escaping () -> Swift.Void)
  @objc(removeOnNewInboxMessageGetListener) public func removeOnNewInboxMessageGetListener()
  @objc(getInbox:::::::) public func getInbox(callback: @escaping (LocPush.GetInboxResponse?) -> Swift.Void, limit: Swift.Int = 100, offset: Swift.Int = 0, associatedValue: Swift.String? = nil, filter: LocPush.InboxCenter.Filter = Filter.DEFAULT, fromDate: Foundation.NSNumber? = nil, toDate: Foundation.NSNumber? = nil)
  @objc(markMessageAsUnread:::) public func markMessageAsUnread(inboxMessage: LocPush.InboxMessageResponse, callback: @escaping (Swift.Bool, LocPush.InboxMessageResponse) -> Swift.Void, associatedValue: Swift.String? = nil)
  @objc(readMessage:::) public func readMessage(inboxMessage: LocPush.InboxMessageResponse, callback: @escaping (Swift.Bool, LocPush.InboxMessageResponse) -> Swift.Void, associatedValue: Swift.String? = nil)
  @objc(deleteAllMessages::) public func deleteAllMessages(callback: @escaping (Swift.Bool) -> Swift.Void, associatedValue: Swift.String? = nil)
  @objc(getInboxCount::::) public func getInboxCount(callback: @escaping (LocPush.GetInboxCountResponse?) -> Swift.Void, associatedValue: Swift.String? = nil, fromDate: Foundation.NSNumber? = nil, toDate: Foundation.NSNumber? = nil)
  @objc(deleteMessage:::) public func deleteMessage(inboxMessage: LocPush.InboxMessageResponse, callback: @escaping (Swift.Bool, LocPush.InboxMessageResponse) -> Swift.Void, associatedValue: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class LocPushNotificationServiceExtension : UserNotifications.UNNotificationServiceExtension {
  @objc override dynamic open func didReceive(_ request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @objc override dynamic open func serviceExtensionTimeWillExpire()
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers open class ICallback<T> {
  @objc deinit
}
@objc(LocpushProperties) public class LocpushProperties : ObjectiveC.NSObject {
  @objc public init(dic: Foundation.NSDictionary)
  @objc(allowAnalytics) public var allowAnalytics: Swift.Bool {
    @objc get
  }
  @objc(allowScreenAnalytics) public var allowScreenAnalytics: Swift.Bool {
    @objc get
  }
  @objc(allowActionAnalytics) public var allowActionAnalytics: Swift.Bool {
    @objc get
  }
  @objc(allowTagAnalytics) public var allowTagAnalytics: Swift.Bool {
    @objc get
  }
  @objc(allowLogInboxReadAnalytics) public var allowLogInboxReadAnalytics: Swift.Bool {
    @objc get
  }
  @objc(allowMessageReadAnalytics) public var allowMessageReadAnalytics: Swift.Bool {
    @objc get
  }
  @objc(allowCloseRichPageAnalytics) public var allowCloseRichPageAnalytics: Swift.Bool {
    @objc get
  }
  @objc(applicationSecret) public var applicationSecret: Swift.String {
    @objc get
  }
  @objc(applicationId) public var applicationId: Swift.Int {
    @objc get
  }
  @objc(baseUrl) public var baseUrl: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Metadata : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public var uuid: Swift.String {
    get
    set
  }
  public var token: Swift.String {
    get
    set
  }
  public var osVersion: Swift.Int? {
    get
    set
  }
  public var operatorName: Swift.String {
    get
    set
  }
  public var operatorCode: Swift.String {
    get
    set
  }
  public var language: Swift.String {
    get
    set
  }
  public var timezone: Swift.Int? {
    get
    set
  }
  public var applicationVersion: Swift.String {
    get
    set
  }
  public var libraryVersion: Swift.String {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EmptyResponse : Swift.Codable {
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class UpdateDeviceInfo : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public var uuid: Swift.String? {
    get
    set
  }
  public var idle: Swift.Bool {
    get
    set
  }
  public var language: Swift.String {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(GetInboxResponse) public class GetInboxResponse : ObjectiveC.NSObject, Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc public var summary: Swift.Int {
    @objc get
  }
  @objc public var unread: Swift.Int {
    @objc get
  }
  @objc public var read: Swift.Int {
    @objc get
  }
  @objc public var totalRead: Swift.Int {
    @objc get
  }
  @objc public var totalSummary: Swift.Int {
    @objc get
  }
  @objc public var totalUnread: Swift.Int {
    @objc get
  }
  @objc public var inboxList: [LocPush.InboxMessageResponse] {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc(ICompletable) public protocol ICompletable {
  @objc func onComplete()
  @objc func onError()
}
@_hasMissingDesignatedInitializers public class ReadInboxMessage : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public var campaignId: Swift.Int {
    get
    set
  }
  public var uuid: Swift.String {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(EventsEntity) public class EventsEntity : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension EventsEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<LocPush.EventsEntity>
  @objc @NSManaged dynamic public var application_id: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var campaign_id: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_type: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var is_idle: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var key: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notification_source: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var os: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var screen_name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var session_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var spent_time: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var time: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var uuid: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var value: Swift.String? {
    @objc get
    @objc set
  }
}
extension LocPush.JsMessage.TypeOfMessage : Swift.Equatable {}
extension LocPush.JsMessage.TypeOfMessage : Swift.Hashable {}
extension LocPush.JsMessage.TypeOfMessage : Swift.RawRepresentable {}
extension LocPush.IActionConstants : Swift.Equatable {}
extension LocPush.IActionConstants : Swift.Hashable {}
extension LocPush.IActionConstants : Swift.RawRepresentable {}
extension LocPush.InboxCenter.Filter : Swift.Equatable {}
extension LocPush.InboxCenter.Filter : Swift.Hashable {}
extension LocPush.InboxCenter.Filter : Swift.RawRepresentable {}
