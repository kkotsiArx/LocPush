#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
#ifndef LOCPUSH_SWIFT_H
#define LOCPUSH_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LocPush",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class Banner;
@class NSString;

SWIFT_CLASS_NAMED("Area")
@interface Area : NSObject
@property (nonatomic, readonly, copy) NSArray<Banner *> * _Nonnull banners;
@property (nonatomic, readonly, copy) NSString * _Nonnull areaCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BannerImage;
@class BannerButton;

SWIFT_CLASS_NAMED("Banner")
@interface Banner : NSObject
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly) NSInteger campaignId;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull bannerDescription;
@property (nonatomic, readonly, copy) NSArray<BannerImage *> * _Nonnull bannerImages;
@property (nonatomic, readonly, copy) NSArray<BannerButton *> * _Nonnull bannerButtons;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("BannerButton")
@interface BannerButton : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
@property (nonatomic, readonly) NSInteger type;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("BannerImage")
@interface BannerImage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull areaCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("BannersCenter")
@interface BannersCenter : NSObject
/// Performs the action of the given button and adds an event to be send to the server.
/// This event notifies the server that a banner was opened.
/// \param buttonData the data of the button that was clicked.
///
- (void)performBannerButtonAction:(NSDictionary<NSString *, NSString *> * _Nonnull)buttonData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Credentials")
@interface Credentials : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nonnull)getAssociations SWIFT_WARN_UNUSED_RESULT;
- (void)addAssociationWith:(NSString * _Nonnull)key :(NSString * _Nonnull)value SWIFT_DEPRECATED_MSG("Due to security issues you will not be able to associated a user with these method. Instead you should associate with a jwt. In feature releases this class will be removed.");
@end


/// A class representing the push notification parameters.
SWIFT_CLASS_NAMED("DeviceInfoParams")
@interface DeviceInfoParams : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull language;
@property (nonatomic, readonly) BOOL isIdle;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A Builder class that constructs a <code>DeviceInfoParams</code> from the given parameters.
SWIFT_CLASS_NAMED("Builder")
@interface Builder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Set the Device Language. If this variable is not set the default language will be used.
/// \param language The name of the Locale.
///
///
/// returns:
/// A <code>DeviceInfoParams</code> from the provided parameters.
- (Builder * _Nonnull)language:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
/// Add or remove a user from the Notification pool. If this variable is not set the default value is false.
/// \param isIdle If this value is true the user will not receive notifications. The default value is false.
///
///
/// returns:
/// A <code>DeviceInfoParams</code> from the provided parameters.
- (Builder * _Nonnull)isIdle:(BOOL)isIdle SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// A <code>DeviceInfoParams</code> from the provided parameters.
- (DeviceInfoParams * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("EventsEntity")
@interface EventsEntity : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface EventsEntity (SWIFT_EXTENSION(LocPush))
@property (nonatomic) int32_t application_id;
@property (nonatomic, copy) NSString * _Nullable area_code;
@property (nonatomic) int32_t banner_id;
@property (nonatomic) int32_t campaign_id;
@property (nonatomic, copy) NSString * _Nullable device_id;
@property (nonatomic, copy) NSString * _Nullable event_id;
@property (nonatomic) int32_t event_type;
@property (nonatomic) int32_t is_idle;
@property (nonatomic, copy) NSString * _Nullable key;
@property (nonatomic) int32_t notification_source;
@property (nonatomic) int32_t os;
@property (nonatomic, copy) NSString * _Nullable screen_name;
@property (nonatomic, copy) NSString * _Nullable session_id;
@property (nonatomic) int64_t spent_time;
@property (nonatomic) int64_t time;
@property (nonatomic, copy) NSString * _Nullable uuid;
@property (nonatomic, copy) NSString * _Nullable value;
@end


SWIFT_CLASS_NAMED("GetBannerResponse")
@interface GetBannerResponse : NSObject
@property (nonatomic, readonly, copy) NSArray<Area *> * _Nonnull areas;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LocPush21GetInboxCountResponse")
@interface GetInboxCountResponse : NSObject
@property (nonatomic, readonly) NSInteger total;
@property (nonatomic, readonly) NSInteger read;
@property (nonatomic, readonly) NSInteger unRead;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class InboxMessageResponse;

SWIFT_CLASS_NAMED("GetInboxResponse")
@interface GetInboxResponse : NSObject
@property (nonatomic, readonly) NSInteger summary;
@property (nonatomic, readonly) NSInteger unread;
@property (nonatomic, readonly) NSInteger read;
@property (nonatomic, readonly) NSInteger totalRead;
@property (nonatomic, readonly) NSInteger totalSummary;
@property (nonatomic, readonly) NSInteger totalUnread;
@property (nonatomic, readonly, copy) NSArray<InboxMessageResponse *> * _Nonnull inboxList;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Interface that defines an action that will be triggered when a message is read. Subclasses
/// should override the <code>Trigger()</code> method to implement the appropriate functionality.
SWIFT_PROTOCOL_NAMED("IAction")
@protocol IAction
/// Triggers the action of a specific message.
- (void)trigger;
@end

typedef SWIFT_ENUM(NSInteger, IActionConstants, open) {
/// Represents an open app action.
  IActionConstantsOpenApp = 1,
/// Represents a rich page action using a pop up.
  IActionConstantsPopUpLandingPage = 2,
/// Represents a rich page action using a pop up.
  IActionConstantsFullLandingPage = 3,
/// Represents an external web url action.
  IActionConstantsExternalWebView = 5,
/// Represents a deep link action.
  IActionConstantsDeepLink = 6,
  IActionConstantsUnknown = -1,
};


SWIFT_PROTOCOL_NAMED("ICompletable")
@protocol ICompletable
/// This method is called when the operation was successful.
- (void)onComplete;
/// This method is called when there was an error.
- (void)onError:(NSError * _Nullable)e;
@end

enum Filter : NSInteger;
@class NSNumber;

/// This class is responsible for handling the Locpush Inbox.
SWIFT_CLASS_NAMED("InboxCenter")
@interface InboxCenter : NSObject
@property (nonatomic, copy) NSString * _Nullable jwToken;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_LIMIT;)
+ (NSInteger)MAX_LIMIT SWIFT_WARN_UNUSED_RESULT;
/// Subscribes for the Locpush new inbox. When a new inbox message is received, the
/// OnNewInboxMessageGetListener.onNewInboxGot() will be called.
/// \param onNewInboxMessageGetListener A  OnNewInboxMessageGetListener that will implement the subscription.
///
- (void)setOnNewInboxMessageGetListener:(void (^ _Nonnull)(void))onNewInboxMessageGetListener;
- (void)removeOnNewInboxMessageGetListener;
/// Get the available inbox.
/// \code
/// MainLocPush.shared.inboxCenter.getInbox (callback: { (response: GetInboxResponse?, error: Error?) in
///    if response != nil {
///       print("Got inbox successful!")
///    } else {
///        print("Failed to get Inbox")
///    }
/// }, associatedValue: associatedValue)
///
/// \endcode\param associatedValue If the associated value is null, the standard inbox will be returned.
///
/// \param callback A closure that will be called when the request is completed. Check the example.
///
/// \param limit How many inbox messages will be returned. The default and the max is 100
///
/// \param offset The position of the first inbox message that will be returned. The default value is 0
///
- (void)getInbox:(void (^ _Nonnull)(GetInboxResponse * _Nullable, NSError * _Nullable))callback :(NSInteger)limit :(NSInteger)offset :(NSString * _Nullable)associatedValue :(enum Filter)filter :(NSNumber * _Nullable)fromDate :(NSNumber * _Nullable)toDate :(NSString * _Nullable)language SWIFT_DEPRECATED_MSG("AssociatedValue will be removed in next versions. In feature releases this method will be removed.");
/// Get the available inbox.
/// \code
/// MainLocPush.shared.inboxCenter.getInbox (callback: { (response: GetInboxResponse?, error: Error?) in
///    if response != nil {
///       print("Got inbox successful!")
///    } else {
///        print("Failed to get Inbox")
///    }
/// })
///
/// \endcode\param callback A closure that will be called when the request is completed. Check the example.
///
/// \param limit How many inbox messages will be returned. The default and the max is 100
///
/// \param offset The position of the first inbox message that will be returned. The default value is 0
///
- (void)getInbox:(void (^ _Nonnull)(GetInboxResponse * _Nullable, NSError * _Nullable))callback :(NSInteger)limit :(NSInteger)offset :(enum Filter)filter :(NSNumber * _Nullable)fromDate :(NSNumber * _Nullable)toDate :(NSString * _Nullable)language;
/// Get the available inbox.
/// \code
/// MainLocPush.shared.inboxCenter.getInbox (callback: { (response: GetInboxResponse?, error: Error?) in
///    if response != nil {
///       print("Got inbox successful!")
///    } else {
///        print("Failed to get Inbox")
///    }
/// }, campaignId, language)
///
/// \endcode\param callback A closure that will be called when the request is completed. Check the example.
///
/// \param campaignId The campaignId of the messages to be returned.
///
/// \param language This parameter will filter all the inbox messages by the language that the message was created.
///
- (void)getInbox:(void (^ _Nonnull)(GetInboxResponse * _Nullable, NSError * _Nullable))callback :(NSInteger)campaignId :(NSString * _Nullable)language;
/// Unreads the given inbox message.
/// \code
/// MainLocPush.shared.inboxCenter.markMessageAsUnread (inboxMessage: inboxMessage, callback: { (success: Bool, inbox: InboxMessageResponse, error: Error?) in
///    if success {
///         print("Message marked as unread successfully!")
///    } else {
///        print("Failed to mark message as unread")
///    }
/// }, associatedValue: associatedValue)
///
/// \endcode\param inboxMessage An <code>InboxMessage</code> that will be read.
///
/// \param callback A closure that will be called when the request is completed.
///
/// \param associatedValue If the associated value is null, the operation will be excecuted to the standard inbox.
///
- (void)markMessageAsUnread:(InboxMessageResponse * _Nonnull)inboxMessage :(void (^ _Nonnull)(BOOL, InboxMessageResponse * _Nonnull, NSError * _Nullable))callback :(NSString * _Nullable)associatedValue SWIFT_DEPRECATED_MSG("AssociatedValue will be removed in next versions. Also, this method couldn't be implemented in a clean architecture. You should use markMessageAsUnreadByData. In feature releases this method will be removed.");
/// Informs the server to set this message as unread.
/// \code
/// MainLocPush.shared.inboxCenter.markMessageAsUnreadByData (inboxData: inboxMessage.data, callback: { (success: Bool, inboxId: Int, error: Error?) in
///    if success {
///         print("Message marked as unread successfully!")
///    } else {
///        print("Failed to mark message as unread")
///    }
/// })
///
/// \endcode\param inboxData A map with the data of an inbox message. You can get this from InboxMessage.data.
///
/// \param callback A closure that will be called when the request is completed.    ///
///
- (void)markMessageAsUnreadByData:(NSDictionary<NSString *, NSString *> * _Nonnull)inboxData :(void (^ _Nonnull)(BOOL, NSInteger, NSError * _Nullable))callback;
/// Triggers the given this message’s action and informs the server to set the message as read..
/// \code
/// MainLocPush.shared.inboxCenter.readMessageByData (inboxData: [String: String], callback: { (success: Bool, inbox: Int, error: Error?) in
///    if success {
///         print("Read message successfully!")
///    } else {
///        print("Failed to read message")
///    }
/// }, associatedValue: associatedValue)
///
/// \endcode\param inboxData A map with the data of an inbox message. You can get this from InboxMessage.data.
///
/// \param callback A closure that will be called when the request is completed.
///
- (void)readMessageByData:(NSDictionary<NSString *, NSString *> * _Nonnull)inboxData :(void (^ _Nonnull)(BOOL, NSInteger, NSError * _Nullable))callback;
/// Triggers the given <code>InboxMessageResponse</code>’s action.
/// \code
/// MainLocPush.shared.inboxCenter.readMessage (inboxMessage: inboxMessage, callback: { (success: Bool, inbox: InboxMessageResponse, error: Error?) in
///    if success {
///         print("Read message successfully!")
///    } else {
///        print("Failed to read message")
///    }
/// }, associatedValue: associatedValue)
///
/// \endcode\param inboxMessage An <code>InboxMessage</code> that will be read.
///
/// \param callback A closure that will be called when the request is completed.
///
/// \param associatedValue If the associated value is null, the operation will be excecuted to the standard inbox.
///
- (void)readMessage:(InboxMessageResponse * _Nonnull)inboxMessage :(void (^ _Nonnull)(BOOL, InboxMessageResponse * _Nonnull, NSError * _Nullable))callback :(NSString * _Nullable)associatedValue SWIFT_DEPRECATED_MSG("AssociatedValue will be removed in next versions. Also, this method couldn't be implemented in a clean architecture. You should use readMessageByData. In feature releases this method will be removed.");
/// Deletes all the messages.
/// \code
/// MainLocPush.shared.inboxCenter.deleteAllMessages(callback: { (success: Bool, error: Error?) in
///    if success {
///         print("Deleted all messages successfully!")
///    } else {
///        print("Failed to delete all messages")
///    }
/// }, associatedValue: associatedValue)
///
/// \endcode\param callback A closure that will be called when the request is completed.
///
/// \param associatedValue If the associated value is null, the operation will be excecuted to the standard inbox.
///
- (void)deleteAllMessages:(void (^ _Nonnull)(BOOL, NSError * _Nullable))callback :(NSString * _Nullable)associatedValue SWIFT_DEPRECATED_MSG("AssociatedValue will be removed in next versions. In feature releases this method will be removed.");
/// Deletes all the messages.
/// \code
/// MainLocPush.shared.inboxCenter.deleteAllMessages(callback: { (success: Bool, error: Error?) in
///    if success {
///         print("Deleted all messages successfully!")
///    } else {
///        print("Failed to delete all messages")
///    }
/// }, associatedValue: associatedValue)
///
/// \endcode\param callback A closure that will be called when the request is completed.
///
- (void)deleteAllMessages:(void (^ _Nonnull)(BOOL, NSError * _Nullable))callback;
/// Get the count of the inbox messages.
/// \code
/// MainLocPush.shared.inboxCenter.getInboxCount(callback: { (response: GetInboxCountResponse?, error: Error?) in
///    if let response = response {
///         print("unread messages: \(response.unRead)")
///     }
///    }, associatedValue: associatedValue)
///
/// \endcode\param callback A closure that will be called when the request is completed.
///
/// \param associatedValue If the associated value is null, the operation will be excecuted to the standard inbox.
///
- (void)getInboxCount:(void (^ _Nonnull)(GetInboxCountResponse * _Nullable, NSError * _Nullable))callback :(NSString * _Nullable)associatedValue :(NSNumber * _Nullable)fromDate :(NSNumber * _Nullable)toDate :(NSString * _Nullable)language SWIFT_DEPRECATED_MSG("AssociatedValue will be removed in next versions.  In feature releases this method will be removed.");
/// Get the count of the inbox messages.
/// \code
/// MainLocPush.shared.inboxCenter.getInboxCount(callback: { (response: GetInboxCountResponse?, error: Error?) in
///    if let response = response {
///         print("unread messages: \(response.unRead)")
///     }
///    })
///
/// \endcode\param callback A closure that will be called when the request is completed.
///
- (void)getInboxCount:(void (^ _Nonnull)(GetInboxCountResponse * _Nullable, NSError * _Nullable))callback :(NSNumber * _Nullable)fromDate :(NSNumber * _Nullable)toDate :(NSString * _Nullable)language;
/// Deletes this message from the inbox.
/// \code
/// MainLocPush.shared.inboxCenter.deleteMessageByData(inboxMessage: inbox[indexPath.row].data, callback: { (success: Bool, _: Int, error: Error?) in
///    if success {
///         print("Message deleted successfully!")
///     } else {
///         print("Message couldn't be deleted!")
///     }
///    }, associatedValue: associatedValue)
///
/// \endcode\param inboxData 
///
/// \param callback A closure that will be called when the request is completed.
///
- (void)deleteMessageByData:(NSDictionary<NSString *, NSString *> * _Nonnull)inboxData :(void (^ _Nonnull)(BOOL, NSInteger, NSError * _Nullable))callback;
/// Deletes the given <code>InboxMessageResponse</code> from the inbox.
/// \code
/// MainLocPush.shared.inboxCenter.deleteMessage(inboxMessage: inbox[indexPath.row], callback: { (success: Bool, _: InboxMessageResponse, error: Error?) in
///    if success {
///         print("Message deleted successfully!")
///     } else {
///         print("Message couldn't be deleted!")
///     }
///    }, associatedValue: associatedValue)
///
/// \endcode\param inboxMessage An <code>InboxMessageResponse</code> that will be deleted.
///
/// \param callback A closure that will be called when the request is completed.
///
/// \param associatedValue If the associated value is null, the operation will be excecuted to the standard inbox.
///
- (void)deleteMessage:(InboxMessageResponse * _Nonnull)inboxMessage :(void (^ _Nonnull)(BOOL, InboxMessageResponse * _Nonnull, NSError * _Nullable))callback :(NSString * _Nullable)associatedValue SWIFT_DEPRECATED_MSG("AssociatedValue will be removed in next versions. Also, this method couldn't be implemented in a clean architecture. You should use deleteMessageByData. In feature releases this method will be removed.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, Filter, open) {
  FilterDEFAULT = 0,
  FilterONLY_READ = 1,
  FilterONLY_UNREAD = 2,
};


SWIFT_CLASS_NAMED("InboxMessageResponse")
@interface InboxMessageResponse : NSObject
@property (nonatomic, readonly) NSInteger campaignId;
@property (nonatomic, readonly) NSInteger messageId;
@property (nonatomic, readonly) int64_t dateCreated;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull messageDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable richImageUrl;
- (void)setRead:(BOOL)read;
/// This value will be false until the user opens the notification from the inbox.
/// Even if the same notification was opened outside the inbox.
- (BOOL)isRead SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable iconUrl;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable customData;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UNNotificationRequest;
@class UNNotificationContent;

/// This class handles the notification service extension in order to add attachments to remote notifications.
/// note:
///
/// Should be subclassed by NotificationService class provided when creating a Notification Service Extension through Xcode.
SWIFT_CLASS("_TtC7LocPush35LocPushNotificationServiceExtension")
@interface LocPushNotificationServiceExtension : UNNotificationServiceExtension
- (void)didReceiveNotificationRequest:(UNNotificationRequest * _Nonnull)request withContentHandler:(void (^ _Nonnull)(UNNotificationContent * _Nonnull))contentHandler;
- (void)serviceExtensionTimeWillExpire;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("LocpushProperties")
@interface LocpushProperties : NSObject
- (nonnull instancetype)initWithDic:(NSDictionary * _Nonnull)dic OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL allowAnalytics;
@property (nonatomic, readonly) BOOL allowScreenAnalytics;
@property (nonatomic, readonly) BOOL allowActionAnalytics;
@property (nonatomic, readonly) BOOL allowTagAnalytics;
@property (nonatomic, readonly) BOOL allowLogInboxReadAnalytics;
@property (nonatomic, readonly) BOOL allowMessageReadAnalytics;
@property (nonatomic, readonly) BOOL allowCloseRichPageAnalytics;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationSecret;
@property (nonatomic, readonly) NSInteger applicationId;
@property (nonatomic, readonly, copy) NSString * _Nonnull baseUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LocPush21LocpushSpecifications")
@interface LocpushSpecifications : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Specifications;
@class UIColor;
@class UNNotificationResponse;
@class UNNotification;

SWIFT_CLASS_NAMED("MainLocPush")
@interface MainLocPush : NSObject
@property (nonatomic, strong) Specifications * _Nullable lastClickedNotification;
@property (nonatomic, readonly, strong) Specifications * _Nullable lastReceivedNotification;
/// The color of the close button at a Rich Media Landing Page (RMLP)
@property (nonatomic, strong) UIColor * _Nullable landingPageCloseButtonColor;
@property (nonatomic, copy) NSString * _Nullable jwToken;
/// The singleton instance of the LocPush library.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MainLocPush * _Nonnull shared;)
+ (MainLocPush * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// You can call this method before initiating the LocPush platform to set the filename of the locpush properties file.
+ (MainLocPush * _Nonnull)withOptions:(NSString * _Nonnull)fileName :(NSString * _Nonnull)ofType SWIFT_WARN_UNUSED_RESULT;
+ (MainLocPush * _Nonnull)with SWIFT_WARN_UNUSED_RESULT;
/// When self value is true the client will not receive notifications.
///
/// returns:
/// Returns true if the client shouldn’t receive notifications.
- (BOOL)getIdle SWIFT_WARN_UNUSED_RESULT;
/// The Language of the host application
///
/// returns:
/// The Language of the host application. If the host application doesn’t set the language the default language will be the device’s language.
- (NSString * _Nonnull)getLanguage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Starts Locpush.
- (void)configure:(NSString * _Nullable)language;
/// Subscribes for the current device UUID of the Locpush platform.
/// \param onUuidChangeListener that will be invoked when the UUID is fetched.
///
///
/// returns:
/// instance to chain calls.
- (MainLocPush * _Nonnull)subscribeUuid:(void (^ _Nonnull)(NSString * _Nonnull))onUuidChangeListener;
/// Clears all the subscribed listenerss
///
/// returns:
/// instance to chain calls.
- (MainLocPush * _Nonnull)unsubscribeUuid;
/// This method should be called when the firebase token changes.
/// \param fcmToken the new firebase token.
///
///
/// returns:
/// Instance to chain calls.
- (MainLocPush * _Nonnull)updateLocpushToken:(NSString * _Nonnull)fcmToken;
/// <summary>
/// Sets whether the Push message action will trigger automatically or delegate the
/// action opening to the hosting application.
/// If set to true , Locpush will open the default activity but will not trigger the
/// message action. The delegated action can be triggered by calling the
/// TriggerDelegatedAction() method when desired. Once triggered, the action will
/// be removed. Subsequent calls to TriggerDelegatedAction() will not trigger the
/// action again.
/// \param delegate A boolean indicating the appropriate behavior. If set to {@code false}, 
/// Locpush will trigger the action automatically. If set to {@code true},
/// Locpush will delegate the message action. </param>
///
///
/// returns:
/// Instance to chain calls.
- (MainLocPush * _Nonnull)delegateActionOpening:(BOOL)shouldDelegate;
/// Call this method to trigger the last pending message’s action.
///
/// returns:
/// Instance to chain calls.
- (MainLocPush * _Nonnull)triggerDelegatedAction;
- (MainLocPush * _Nonnull)blockTrackingAnalytics:(BOOL)block;
- (id <IAction> _Nonnull)getActionOfInboxMessage:(InboxMessageResponse * _Nonnull)inboxMessage SWIFT_WARN_UNUSED_RESULT;
- (enum IActionConstants)getActionTypeOfInboxMessage:(InboxMessageResponse * _Nonnull)inboxMessage SWIFT_WARN_UNUSED_RESULT;
/// Return the action type of the Notication.
/// Users can handle the notification tap differently depending on the action that will be fired.
- (enum IActionConstants)getNoticiationAction:(UNNotificationResponse * _Nonnull)response SWIFT_WARN_UNUSED_RESULT;
/// This object is responsible for handling the inbox.
@property (nonatomic, readonly, strong) InboxCenter * _Nonnull mInboxCenter;
/// This object is responsible for handling the inbox.
@property (nonatomic, readonly, strong) InboxCenter * _Nonnull inboxCenter;
/// This object is responsible for handling the inbox.
@property (nonatomic, readonly, strong) BannersCenter * _Nonnull bannersCenter;
/// Intercepts all incoming push notifications and redirects them to inbox. self mechanism is enabled while the flag is set to true. A silent period can be implemented by using the iOS’s lifecycle callbacks
/// \param intercept A boolean indicating the intercept switch mechanism.
///
///
/// returns:
/// Instance to chain calls.
- (MainLocPush * _Nonnull)interceptNotifications:(BOOL)intercept;
///
/// returns:
/// the current version of the Library
- (NSString * _Nonnull)versionLibrary SWIFT_WARN_UNUSED_RESULT;
- (MainLocPush * _Nonnull)handleNotificationTap:(UNNotificationResponse * _Nonnull)response :(void (^ _Nonnull)(void))completionHandler;
- (MainLocPush * _Nonnull)handleNotificationReceived:(UNNotification * _Nonnull)notification :(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
- (MainLocPush * _Nonnull)handleBackgroundNotification:(NSDictionary * _Nonnull)userInfo :(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
/// Associate the applications uuid with a key-value pair. The User can send notifications(from the LocPush platform) to users with a specific key or value.
/// \param credentials An object with a key-value pair.
///
/// \param callback a callback to infrom the client if the association was successful.
///
///
/// returns:
/// Instance to chain calls.
- (MainLocPush * _Nonnull)associateUuidWithCredentials:(Credentials * _Nonnull)credentials :(void (^ _Nonnull)(BOOL))callback SWIFT_DEPRECATED_MSG("Due to security issues you will not be able to associate with this method. Instead you should associate with a jwt. In feature releases this method will be removed.");
/// Associate the applications uuid with a Json Web Token.
/// \param jwt A Json Web Token. This token may contain multiple associated values and keys for a uuid.
///
/// \param callback a callback to infrom the client if the association was successful.
///
///
/// returns:
/// Instance to chain calls.
- (MainLocPush * _Nonnull)associateUuidWithJwt:(NSString * _Nonnull)jwt :(void (^ _Nonnull)(BOOL))callback;
/// With this method you can clear ALL the associations.
/// \param callback a callback to infrom the client if the operation  was successful.
///
///
/// returns:
/// Instance to chain calls.
- (MainLocPush * _Nonnull)clearAllAssociations:(void (^ _Nonnull)(BOOL))callback;
/// Sends a screen name to the app server.
/// \param named A String representing the screen name.
///
- (MainLocPush * _Nonnull)locTrackScreen:(NSString * _Nonnull)named;
/// Sends an action tag to the app server.
/// \param key A String representing the topic.
///
/// \param value A String representing the value of the topic.
///
///
/// returns:
/// instance to chain calls.
- (MainLocPush * _Nonnull)addTag:(NSString * _Nonnull)key :(NSString * _Nonnull)value;
/// Sends an action event to the app server.
/// \param key A String representing the topic.
///
/// \param value A String representing the value of the topic.
///
///
/// returns:
/// instance to chain calls.
- (MainLocPush * _Nonnull)addAction:(NSString * _Nonnull)key :(NSString * _Nonnull)value;
/// Update the client’s information (language and idle state)
/// \code
/// let params = DeviceInfoParams.Builder().
///                 isIdle(isIdle: true).
///                 language(language: "gr").
///                 build()
/// MainLocPush.shared.updateDeviceInfo(params: params) { (success, newParams) in
///    if(success){
///        print("the new language is: \(newParams.language)")
///    }
/// }
///
/// \endcode\param params The parameters to update.
///
/// \param callback A callback when the update succeeds or fails. If the update succeeds the new device info parameters will be returned else null.    ///
///
///
/// returns:
/// instance to chain calls.
- (MainLocPush * _Nonnull)updateDeviceInfo:(DeviceInfoParams * _Nonnull)params :(void (^ _Nonnull)(BOOL, DeviceInfoParams * _Nullable))callback;
@end



/// Class that defines the <code>Message</code>’s specifications. These specifications are
/// create from the <code>MessageService#onMessageReceived(RemoteMessage)</code> method payload. Each
/// field is safely unwrapped.
SWIFT_CLASS_NAMED("Specifications")
@interface Specifications : LocpushSpecifications
@end





#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
